server.port=9992
spring.application.name=customer-service
server.servlet.context-path=/customer-service
application-description=customer-service
application-version=v1.0
springdoc.api-docs.path=/api-docs

spring.security.user.name=admin
spring.security.user.password=admin

spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
#spring.data.mongodb.uri=mongodb://dev-backend-cosmos01:yw3AL4Ks5ySYByYvQc5uVnqAfIPhipz8Csr4KudD3RyvuO5bUDZIxdl0KlCDaOQ9efnpTFb74VHCoKgfXNUigA==@dev-backend-cosmos01.mongo.cosmos.azure.com:10255/?ssl=true&replicaSet=globaldb&retryWrites=false&socketKeepAlive=true&maxIdleTimeMS=20000&minPoolSize=5&maxPoolSize=10&connectTimeoutMS=30000&appName=@dev-backend-cosmos01@
spring.data.mongodb.uri=mongodb://localhost:27017
spring.data.mongodb.database=ms-poc-customers-db
spring.data.mongodb.auto-index-creation=true

#kafka
spring.cloud.stream.kafka.binder.brokers=localhost:9093
#functionRouter is used for routing to different consumers by a routing expression
spring.cloud.stream.bindings.functionRouter-in-0.destination=outbox.event.payment
#groups together multiple instances of this application and treats them as the same logical consumer
#(when scaling this should be provided by environment variable so there will be multiple groups, each with a number of instances)
spring.cloud.stream.bindings.functionRouter-in-0.group=customerConsumerGroup1
spring.cloud.stream.bindings.functionRouter.content-type=application/json
#pick up the first message that was sent when this consumer was down
spring.cloud.stream.binder.kafka.start-offset=earliest
#enable routing
spring.cloud.stream.function.routing.enabled=true
#helps in deserializing custom headers
spring.cloud.stream.kafka.binder.headerMapperBeanName=defaultKafkaHeaderMapper

interestingEvents=PaymentAuthorizedEvent;PaymentNotAuthorizedEvent




